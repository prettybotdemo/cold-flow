<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.warm.flow.core.mapper.FlowNodeMapper">

    <resultMap type="com.warm.flow.core.domain.entity.FlowNode" id="FlowNodeResult">
        <result property="id" column="id"/>
        <result property="nodeType" column="node_type"/>
        <result property="definitionId" column="definition_id"/>
        <result property="nodeName" column="node_name"/>
        <result property="nodeCode" column="node_code"/>
        <result property="permissionFlag" column="permission_flag"/>
        <result property="version" column="version"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectVo">
        select t.id,
               t.node_type,
               t.definition_id,
               t.node_name,
               t.node_code,
               t.permission_flag,
               t.version,
               t.create_time,
               t.update_time
        from flow_node t
    </sql>

    <sql id="paging_end">
        <if test="page !=null and page.pageNum != null and page.pageSize != null">LIMIT
            #{page.pageNum},#{page.pageSize}
        </if>
    </sql>

    <sql id="order_by">
        <if test="order != null and order != ''">order by ${order}</if>
    </sql>

    <sql id="select_parameter">
        <where>
            <if test="entity.nodeType != null">and t.node_type = #{entity.nodeType}</if>
            <if test="entity.definitionId != null">and t.definition_id = #{entity.definitionId}</if>
            <if test="entity.nodeName != null and entity.nodeName != ''">and t.node_name like
                concat('%',#{entity.nodeName}, '%')
            </if>
            <if test="entity.nodeCode != null and entity.nodeCode != ''">and t.node_code = #{entity.nodeCode}</if>
            <if test="entity.permissionFlag != null and entity.permissionFlag != ''">and t.permission_flag =
                #{entity.permissionFlag}
            </if>
            <if test="entity.version != null and entity.version != ''">and t.version = #{entity.version}</if>
        </where>
    </sql>

    <select id="selectCount" parameterType="com.warm.flow.core.domain.entity.FlowNode" resultType="java.lang.Long">
        select count(*) from flow_node t
        <include refid="select_parameter"/>
    </select>

    <select id="selectList" parameterType="com.warm.flow.core.domain.entity.FlowNode" resultMap="FlowNodeResult">
        <include refid="selectVo"/>
        <include refid="select_parameter"/>
        <include refid="order_by"/>
        <include refid="paging_end"/>
    </select>

    <select id="selectByIds" parameterType="Long" resultMap="FlowNodeResult">
        <include refid="selectVo"/>
        where t.id in
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="selectById" parameterType="Long" resultMap="FlowNodeResult">
        <include refid="selectVo"/>
        where id = #{id}
    </select>

    <select id="getLastByFlowCode" resultMap="FlowNodeResult" parameterType="java.lang.String">
        select a.id,
               a.definition_id,
               a.node_name,
               a.node_code,
               a.permission_flag,
               a.update_time,
               a.node_type,
               b.version
        from flow_node a
                 INNER JOIN
             flow_definition b on b.flow_code = #{value} and a.definition_id = b.id and b.is_publish = 1
    </select>

    <select id="getByFlowCodeAndVersion" resultMap="FlowNodeResult" parameterType="java.util.Map">
        select a.id,
               a.definition_id,
               a.node_name,
               a.node_code,
               a.permission_flag,
               a.update_time,
               a.node_type,
               b.version
        from flow_node a
                 INNER JOIN
             flow_definition b on b.flow_code = #{flowCode} and a.definition_id = b.id and b.version = #{version}
    </select>

    <insert id="insert" parameterType="com.warm.flow.core.domain.entity.FlowNode">
        insert into flow_node
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="nodeType != null">node_type,</if>
            <if test="definitionId != null">definition_id,</if>
            <if test="nodeName != null and nodeName != ''">node_name,</if>
            <if test="nodeCode != null and nodeCode != ''">node_code,</if>
            <if test="permissionFlag != null">permission_flag,</if>
            <if test="version != null and version != ''">version,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="nodeType != null">#{nodeType},</if>
            <if test="definitionId != null">#{definitionId},</if>
            <if test="nodeName != null and nodeName != ''">#{nodeName},</if>
            <if test="nodeCode != null and nodeCode != ''">#{nodeCode},</if>
            <if test="permissionFlag != null">#{permissionFlag},</if>
            <if test="version != null and version != ''">#{version},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="com.warm.flow.core.domain.entity.FlowNode">
        update flow_node
        <trim prefix="SET" suffixOverrides=",">
            <if test="nodeType != null">node_type = #{nodeType},</if>
            <if test="definitionId != null">definition_id = #{definitionId},</if>
            <if test="nodeName != null and nodeName != ''">node_name = #{nodeName},</if>
            <if test="nodeCode != null and nodeCode != ''">node_code = #{nodeCode},</if>
            <if test="permissionFlag != null">permission_flag = #{permissionFlag},</if>
            <if test="version != null and version != ''">version = #{version},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteById" parameterType="Long">
        delete
        from flow_node
        where id = #{id}
    </delete>

    <delete id="deleteByIds" parameterType="Long">
        delete from flow_node where id in
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteByDefinitionId" parameterType="Long">
        delete
        from flow_node
        where definition_id = #{definitionId}
    </delete>

</mapper>
